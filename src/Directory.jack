class Directory {

  field String dir_name;
  field int dir_count;
  field int file_count;

  field boolean has_parent;
  field Directory parent_dir;

  field Array directories;
  field Array files;

  constructor Directory new(String name) {
    let dir_name = name;
    let dir_count = 0;
    let file_count = 0;
    let directories = Array.new(dir_count + 1);
    let files = Array.new(file_count + 1);
    let has_parent = false;
    return this;
  }

  constructor Directory child(String name, Directory parent) {
    let dir_name = name;
    let dir_count = 0;
    let file_count = 0;
    let directories = Array.new(dir_count + 1);
    let files = Array.new(file_count + 1);
    let has_parent = true;
    let parent_dir = parent;
    return this;
  }

  method String getName() {
    return dir_name;
  }

  method int getCount() {
    return dir_count + file_count;
  }

  method boolean hasParent() {
    return has_parent;
  }

  method Director getParentDir() {
    return parent_dir;
  }

  method boolean hasDirectory(String child_name) {
    var Directory current_directory;
    var boolean has_directory;
    var int counter;
    let counter = 0;
    let has_directory = false;
    while (counter < dir_count) {
      let current_directory = directories[counter];
      if (StringUtil.isEqual(current_directory.getName(), child_name)) {
        let has_directory = true;
      }
      let counter = counter + 1;
    }
    return has_directory;
  }

  method void addDir(Directory dir) {
    var Array new_directories;
    var int counter;
    let counter = 0;
    let dir_count = dir_count + 1;
    let new_directories = Array.new(dir_count);
    while (counter < (dir_count - 1)) {
      let new_directories[counter] = directories[0];
      let counter = counter + 1;
    }
    let new_directories[dir_count - 1] = dir;
    do directories.dispose();
    let directories = new_directories;
    return;
  }

  method void removeDir(String rmdir_name) {
    var Array new_directories;
    var Directory current_dir;
    var int counter;
    let counter = 0;
    let dir_count = dir_count - 1;
    if (dir_count < 1) {
      let new_directories = Array.new(1);
    } else {
      let new_directories = Array.new(dir_count);
    }
    while (counter < (dir_count - 1)) {
      let current_dir = directories[counter];
      if (~StringUtil.isEqual(current_dir.getName(), rmdir_name)) {
        let new_directories[counter] = current_dir;
      }
      let counter = counter + 1;
    }
    do directories.dispose();
    let directories = new_directories;
    return;
  }

  method Directory getDir(String name) {
    var int counter;
    var Directory current_dir;
    var Directory found_dir;
    let counter = 0;
    while (counter < dir_count) {
      let current_dir = directories[counter];
      if (StringUtil.isEqual(current_dir.getName(), name)) {
        let found_dir = current_dir;
      }
      let counter = counter + 1;
    }
    return found_dir;
  }

  method boolean hasFile(String filename) {
    var File current_file;
    var boolean has_file;
    var int counter;
    let counter = 0;
    let has_file = false;
    while (counter < file_count) {
      let current_file = files[counter];
      if (StringUtil.isEqual(current_file.getName(), filename)) {
        let has_file = true;
      }
      let counter = counter + 1;
    }
    return has_file;
  }

  method void addFile(File file) {
    var Array new_files;
    var int counter;
    let counter = 0;
    let file_count = file_count + 1;
    let new_files = Array.new(file_count);
    while (counter < (file_count - 1)) {
      let new_files[counter] = files[0];
      let counter = counter + 1;
    }
    let new_files[file_count - 1] = file;
    do files.dispose();
    let files = new_files;
    return;
  }

  method void listDir() {
    var int counter;
    var Directory current_dir;
    if (has_parent) {
      do Output.printString("..");
      do Output.println();
    }
    let counter = 0;
    while (counter < dir_count) {
      let current_dir = directories[counter];
      do Output.printString(current_dir.getName());
      do Output.println();
      let counter = counter + 1;
    }
    return;
  }

}
